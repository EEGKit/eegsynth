#!/usr/bin/env python

# The EEGsynth application starts all modules that are specified in a "patch" directory,
# where each module is specified with a corresponding ini file.
#
# This software is part of the EEGsynth project, see <https://github.com/eegsynth/eegsynth>.
#
# Copyright (C) 2019 EEGsynth project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import argparse
from multiprocessing import Process

if hasattr(sys, 'frozen'):
    path = os.path.split(sys.executable)[0]
    file = os.path.split(sys.executable)[-1]
    name = os.path.splitext(file)[0]
elif __name__=='__main__' and sys.argv[0] != '':
    path = os.path.split(sys.argv[0])[0]
    file = os.path.split(sys.argv[0])[-1]
    name = os.path.splitext(file)[0]
elif __name__=='__main__':
    path = os.path.abspath('')
    file = os.path.split(path)[-1] + '.py'
    name = os.path.splitext(file)[0]
else:
    path = os.path.split(__file__)[0]
    file = os.path.split(__file__)[-1]
    name = os.path.splitext(file)[0]

# eegsynth/module contains the modules
sys.path.insert(0, os.path.join(path, '..'))
from module import *

parser = argparse.ArgumentParser()
parser.add_argument("patch", default=path, help="directory that represents the patch with all configuration files")
args = parser.parse_args()

# make a list of all ini files in this patch
files = os.listdir(args.patch)
files = [file for file in files if file.endswith(('.ini'))]

# ignore the EEGsynth modules that are not implemented in Python but that do have an ini file
files = list(set(files) - set(['redis.ini', 'buffer.ini', 'openbci2ft.ini']))

# this will contain a list of processes
process = []

# the module starts as soon as it is instantiated
# optional command-line arguments can be passed to specify the ini file
def start(module, args=None):
    module(args)

for file in files:
    module = os.path.split(file)[-1]        # keep only the filename
    module = os.path.splitext(module)[0]    # remove the ini extension
    module = module.split('-')[0]           # remove whatever comes after a "-" separator
    module = module.split('_')[0]           # remove whatever comes after a "_" separator

    # convert the string in a reference to the corresponding Module class
    # as soon as the object is instantiated, the module will start
    module = eval(module + '.Module')
    inifile = os.path.join(args.patch, file)
    process.append(Process(target=start, args=(module, ['--inifile', inifile])))

for p in process:
    p.start()

for p in process:
    p.join()
